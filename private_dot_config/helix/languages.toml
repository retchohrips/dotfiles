[[language]]
name = "bash"
scope = "source.bash"
injection-regex = "(shell|bash|zsh|sh)"
file-types = [
  "sh",
  "bash",
  "zsh",
  ".bash_login",
  ".bash_logout",
  ".bash_profile",
  ".bashrc",
  ".bash_aliases",
  ".profile",
  ".zshenv",
  ".zlogin",
  ".zlogout",
  ".zprofile",
  ".zshrc",
  "APKBUILD",
  "PKGBUILD",
  "eclass",
  "ebuild",
  "bazelrc",
]
shebangs = ["sh", "bash", "dash", "zsh"]
indent = { tab-width = 2, unit = "  " }
language-servers = ["bash-language-server"]
formatter = { command = "shfmt", args = ["-i", "2", "-ci"] } # Google's Style

[language-server.bash-language-server]
command = "bash-language-server"
args = ["start"]

[[language]]
name = "dockerfile"
scope = "source.dockerfile"
injection-regex = "docker|dockerfile"
file-types = ["Dockerfile", "dockerfile"]
indent = { tab-width = 2, unit = "  " }
language-servers = ["docker-langserver", "hadolint"]

[[language]]
name = "docker-compose"
language-servers = [
  "docker-compose-langserver",
  "yaml-language-server",
  "buffer-ls",
]

[language-server.docker-langserver]
command = "docker-langserver"
args = ["--stdio"]

[[language]]
name = "fish"
scope = "source.fish"
injection-regex = "fish"
file-types = ["fish"]
shebangs = ["fish"]
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "markdown"
scope = "source.md"
injection-regex = "md|markdown"
file-types = ["markdown", "md"]
indent = { tab-width = 2, unit = "  " }
language-servers = ["marksman", "markdownlint"]

[[language]]
name = "markdown.inline"
scope = "source.markdown.inline"
injection-regex = "markdown\\.inline"

[language-server.marksman]
command = "marksman"
args = ["--stdio"]

[language-server.markdownlint]
command = "markdownlint"
args = []

[[language]]
name = "python"
scope = "source.python"
injection-regex = "python"
file-types = ["py"]
shebangs = ["python"]
roots = ["pyproject.toml"]
indent = { tab-width = 4, unit = "    " }
language-servers = ["basedpyright", "ruff"]

[language-server.basedpyright.config.python]
pythonPath = ".venv/bin/python"

[language-server.basedpyright.config.basedpyright.analysis]
typeCheckingMode = "standard" # off, basic, standard, strict, all

[language-server.basedpyright.config.basedpyright.analysis.diagnosticSeverityOverrides]
reportUnusedImport = false   # ruff
reportUnusedVariable = false # ruff

[language-server.ruff]
command = "ruff"
args = ["server"]

[[language]]
name = "toml"
scope = "source.toml"
injection-regex = "toml"
file-types = ["toml"]
language-servers = ["taplo-lsp"]

[language-server.taplo-lsp]
command = "taplo"
args = ["lsp", "stdio"]

[language-server.taplo-lsp.config]
debug = false
taploConfig = 'taplo://taplo.toml'
taploConfigEnabled = true
activationStatus = true
semanticTokens = false

[language-server.taplo-lsp.config.evenBetterToml.schema]
enabled = true
links = false
repositoryEnabled = true
repositoryUrl = "https://taplo.tamasfe.dev/schema_index.json"

[language-server.taplo-lsp.config.evenBetterToml.schema.associations]
'^(.*(/|\\)Cargo\.toml|Cargo\.toml)$' = "taplo://Cargo.toml"

[language-server.taplo-lsp.config.evenBetterToml.formatter]
alignEntries = true
alignComments = true
arrayTrailingComma = true
arrayAutoExpand = true
arrayAutoCollapse = true
compactArrays = true
compactInlineTables = false
compactEntries = false
columnWidth = 80
indentTables = false
indentEntries = false
indentString = {}
reorderKeys = true
allowedBlankLines = 2
trailingNewline = true
crlf = false

[language-server.taplo-lsp.config.evenBetterToml.actions]
ignoreDepracatedAssociations = false

# Git
[[language]]
name = "git-config"
scope = "source.gitconfig"
injection-regex = "git-config"
file-types = [
  ".gitmodules",
  ".gitconfig",
  { glob = ".git/config" },
  { glob = ".config/git/config" },
]
indent = { tab-width = 4, unit = "\t" }

[[language]]
name = "git-attributes"
scope = "source.gitattributes"
injection-regex = "git-attributes"
file-types = [".gitattributes"]

[[language]]
name = "git-ignore"
scope = "source.gitignore"
injection-regex = "git-ignore"
file-types = [".gitignore", ".gitignore_global"]

[[language]]
name = "git-commit"
scope = "git.commitmsg"
file-types = ["COMMIT_EDITMSG"]
indent = { tab-width = 2, unit = "  " }
rulers = [50, 72]
text-width = 72

[[language]]
name = "git-rebase"
scope = "source.gitrebase"
injection-regex = "git-rebase"
file-types = ["git-rebase-todo"]
indent = { tab-width = 2, unit = " " }

# Config
[[language]]
name = "sshclientconfig"
scope = "source.sshclientconfig"
file-types = [{ glob = ".ssh/config" }, { glob = "/etc/ssh/ssh_config" }]

[[language]]
name = "diff"
scope = "source.diff"
injection-regex = "diff"
file-types = ["diff", "patch"]
indent = { tab-width = 2, unit = "  " }

[[language]]
name = "regex"
scope = "source.regex"
injection-regex = "regex"
file-types = ["regex"]
